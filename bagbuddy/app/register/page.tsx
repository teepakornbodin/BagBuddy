// app/register/page.tsx
"use client";

import { useEffect, useRef, useState } from "react";
import { supabase } from "@/lib/supabaseClient";

const BUCKET = "shop-images";

// ‚úÖ ‡πÉ‡∏ä‡πâ accountId ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô public.account (‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: role=shop)
const DEV_ACCOUNT_ID = "03c4ac41-3531-4007-b1b1-a05d80b5c5d8";

export default function Page() {
  const [msg, setMsg] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  // form state
  const [shop_name, setShopName] = useState("");
  const [phone, setPhone] = useState("");
  const [status, setStatus] = useState("");              // enum shop_status
  const [shop_type, setShopType] = useState<string>(""); // enum (nullable)
  const [longitude, setLongitude] = useState("");
  const [latitude, setLatitude] = useState("");
  const [rating, setRating] = useState("0");
  const [deposit, setDeposit] = useState("0");
  const [pricePerHour, setPricePerHour] = useState("0");
  const [contact_email, setContactEmail] = useState("");
  const [full_address, setFullAddress] = useState("");
  const [description, setDescription] = useState("");
  const [imageFile, setImageFile] = useState<File | null>(null);
  const fileRef = useRef<HTMLInputElement>(null);

  const [statusOptions, setStatusOptions] = useState<string[]>([]);
  const [typeOptions, setTypeOptions] = useState<string[]>([]);

  // ‡πÇ‡∏´‡∏•‡∏î enum ‡∏à‡∏≤‡∏Å views ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà DB ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
  useEffect(() => {
    (async () => {
      const { data: st } = await supabase.from("v_enum_shop_status").select("value");
      const stVals = (st?.map((x: any) => x.value) ?? []) as string[];
      const stFinal = stVals.length ? stVals : ["approve"];   // üëà fallback
      setStatusOptions(stFinal);
      setStatus(stFinal[0]);

      const { data: tp } = await supabase.from("v_enum_shop_type").select("value");
      const tpVals = (tp?.map((x: any) => x.value) ?? []) as string[];
      const tpFinal = tpVals.length ? tpVals : ["Shop"];      // üëà fallback
      setTypeOptions(tpFinal);
      setShopType(tpFinal[0]);
    })();
  }, []);

  // ‡∏Å‡∏±‡∏ô key invalid (‡πÑ‡∏ó‡∏¢/‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á/‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå)
  function asciiKey(s: string) {
    return (s || "file")
      .normalize("NFKD")
      .replace(/[\u0300-\u036f]/g, "")
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/^-+|-+$/g, "") || "file";
  }
  const num = (v: string, fb = 0) => (Number.isNaN(Number(v)) ? fb : Number(v));

  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    setMsg(null);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!shop_name || !phone || !status || !longitude) {
      setMsg("‡∏Å‡∏£‡∏≠‡∏Å shop_name, phone, status, longitude ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      return;
    }
    if (!imageFile) {
      setMsg("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ (image ‡πÄ‡∏õ‡πá‡∏ô NOT NULL)");
      return;
    }

    const longitudeNum = Number(longitude);
    if (Number.isNaN(longitudeNum)) return setMsg("longitude ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç");
    const latitudeNum = latitude ? Number(latitude) : null;
    if (latitude && Number.isNaN(latitudeNum)) return setMsg("latitude ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç");

    setLoading(true);
    try {
      // 1) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ (‡πÉ‡∏ä‡πâ key ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ASCII)
      const ext = imageFile.name.split(".").pop() || "jpg";
      const base = asciiKey(shop_name || full_address || "shop");
      const filePath = `shops/${base}-${Date.now()}.${ext}`;
      const up = await supabase.storage.from(BUCKET).upload(filePath, imageFile, {
        upsert: false,
        contentType: imageFile.type || "image/*",
      });
      if (up.error) throw up.error;

      const { data: pub } = supabase.storage.from(BUCKET).getPublicUrl(filePath);
      const imageUrl = pub.publicUrl;
      if (!imageUrl) throw new Error("‡πÑ‡∏î‡πâ URL ‡∏£‡∏π‡∏õ‡∏ß‡πà‡∏≤‡∏á");

      // 2) insert ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å NOT NULL + ‡πÉ‡∏ä‡πâ DEV_ACCOUNT_ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏≤‡∏£‡∏≤‡∏á account)
      const payload = {
        shop_name,
        phone,
        contact_email: contact_email || null,
        full_address: full_address || null,
        description: description || null,
        longitude: longitudeNum,              // NOT NULL
        latitude: latitudeNum,                // NULL ok
        rating: num(rating, 0),               // NOT NULL
        deposit: num(deposit, 0),             // NOT NULL
        price_per_hour: num(pricePerHour, 0), // NOT NULL
        status,                               // enum (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á DB; fallback = 'approve')
        shop_type: shop_type || null,         // enum/nullable (fallback = 'Shop')
        accountId: DEV_ACCOUNT_ID,            // ‚úÖ FK ‡πÑ‡∏õ public.account(accountId)
        image: imageUrl,                      // NOT NULL
      };

      const { error: insErr } = await supabase.from("shops").insert(payload);
      if (insErr) throw insErr;

      setMsg("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      (e.target as HTMLFormElement).reset();
      setShopName(""); setPhone(""); setContactEmail(""); setFullAddress("");
      setDescription(""); setLongitude(""); setLatitude("");
      setRating("0"); setDeposit("0"); setPricePerHour("0");
      if (fileRef.current) fileRef.current.value = "";
    } catch (err: any) {
      console.error(err);
      setMsg(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err?.message || String(err)}`);
    } finally {
      setLoading(false);
    }
  }

  return (
    <main className="min-h-screen bg-gray-50">
      <div className="mx-auto max-w-4xl p-6 space-y-6">
        <h1 className="text-2xl font-bold">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡πâ‡∏≤‡∏ô (DEV mode ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô)</h1>

        <form onSubmit={handleSubmit} className="space-y-5 rounded-2xl border bg-white p-6 shadow-sm">
          <div className="grid gap-4 md:grid-cols-3">
            <div>
              <label className="text-sm">‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô *</label>
              <input className="w-full rounded border px-3 py-2" onChange={e=>setShopName(e.target.value)} required />
            </div>
            <div>
              <label className="text-sm">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *</label>
              <input className="w-full rounded border px-3 py-2" onChange={e=>setPhone(e.target.value)} required />
            </div>
            <div>
              <label className="text-sm">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (enum) *</label>
              <select className="w-full rounded border px-3 py-2 bg-white" value={status} onChange={e=>setStatus(e.target.value)} required>
                {statusOptions.map(v => <option key={v} value={v}>{v}</option>)}
              </select>
              <p className="text-xs text-gray-500">‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤ view/‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡πà‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‚Äî ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏∞ fallback ‡πÄ‡∏õ‡πá‡∏ô 'approve'</p>
            </div>
          </div>

          <div className="grid gap-4 md:grid-cols-3">
            <div>
              <label className="text-sm">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡πâ‡∏≤‡∏ô (enum)</label>
              <select className="w-full rounded border px-3 py-2 bg-white" value={shop_type} onChange={e=>setShopType(e.target.value)}>
                <option value="">(‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ)</option>
                {typeOptions.map(v => <option key={v} value={v}>{v}</option>)}
              </select>
              <p className="text-xs text-gray-500">fallback = 'Shop'</p>
            </div>
            <div>
              <label className="text-sm">‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î *</label>
              <input type="number" step="0.000001" className="w-full rounded border px-3 py-2" onChange={e=>setLongitude(e.target.value)} required />
            </div>
            <div>
              <label className="text-sm">‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î</label>
              <input type="number" step="0.000001" className="w-full rounded border px-3 py-2" onChange={e=>setLatitude(e.target.value)} />
            </div>
          </div>

          <div className="grid gap-4 md:grid-cols-3">
            <div>
              <label className="text-sm">rating *</label>
              <input type="number" step="0.1" min="0" max="5" className="w-full rounded border px-3 py-2" defaultValue="0" onChange={e=>setRating(e.target.value)} required />
            </div>
            <div>
              <label className="text-sm">deposit *</label>
              <input type="number" step="0.01" min="0" className="w-full rounded border px-3 py-2" defaultValue="0" onChange={e=>setDeposit(e.target.value)} required />
            </div>
            <div>
              <label className="text-sm">price_per_hour *</label>
              <input type="number" step="0.01" min="0" className="w-full rounded border px-3 py-2" defaultValue="0" onChange={e=>setPricePerHour(e.target.value)} required />
            </div>
          </div>

          <div>
            <label className="text-sm">‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡πâ‡∏≤‡∏ô</label>
            <input type="email" className="w-full rounded border px-3 py-2" onChange={e=>setContactEmail(e.target.value)} />
          </div>
          <div>
            <label className="text-sm">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ï‡πá‡∏°</label>
            <input className="w-full rounded border px-3 py-2" onChange={e=>setFullAddress(e.target.value)} />
          </div>
          <div>
            <label className="text-sm">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</label>
            <input className="w-full rounded border px-3 py-2" onChange={e=>setDescription(e.target.value)} />
          </div>

          <div>
            <label className="text-sm">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡πâ‡∏≤‡∏ô *</label>
            <input ref={fileRef} type="file" accept="image/*" className="w-full rounded border px-3 py-2" onChange={(e)=>setImageFile(e.target.files?.[0] ?? null)} required />
            <p className="text-xs text-gray-500">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ bucket "{BUCKET}" (‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ASCII)</p>
          </div>

          <button disabled={loading} className="w-full rounded bg-black px-4 py-2 text-white disabled:opacity-50">
            {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‚Ä¶" : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
          </button>

          {msg && <div className="rounded bg-gray-50 p-3 text-sm">{msg}</div>}
        </form>
      </div>
    </main>
  );
}
